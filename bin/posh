#! /usr/bin/env python3

import cmd, sys, os, shlex
from polo2 import PoloConfig
from polo2 import PoloMallet
from polo2 import PoloCorpus


class PoloShell(cmd.Cmd):

    intro = "Welcome to Polo Shell. Run set_ini to get started."
    prompt = 'posh: '

    ready = 1

    default_ini = 'config.ini'
    config = None
    trial = 'trial1'
    corpus = None
    mallet = None

    completions = ['corpus', 'mallet']

    def preloop(self):
        if not os.path.isfile(self.default_ini):
            print('No config file! Run `polo setup` to get started.')
            sys.exit(1)
        else:
            self.do_ini_load(None)
            print("Using config.ini")
            self.trials = self.config.get_trial_names()
            self.slug = self.config.ini['DEFAULT']['slug']
            self.base_path = self.config.ini['DEFAULT']['base_path']
            print("Project slug:", self.slug)
            print("Available trials:", ', '.join(self.trials))
            print("Base path:", self.base_path)

    def onerror(self):
        """Called if an exception is raised in any of precmd(), onecmd(),
        or postcmd(). If true is returned, the exception is deemed to have
        been dealt with."""
        pass

    def logerror(self, msg):
        sys.stderr.write(msg + '\n')

    # def do_EOF(self, arg):
    #     return True
    #
    # def do_shell(self, arg):
    #     args = shlex.split(arg)
    #     print(args)

    def do_bye(self, arg):
        print('Thank you for using the Polo Shell.')
        return True

    def do_quit(self, arg):
        print('Thank you for using the Polo Shell.')
        return True

    # GENERAL / HIGH LEVEL

    def do_guide(self, arg):
        msg = """
Here's what you do:
    corpus_source_make (optional)
    corpus_source_load
    corpus_tables_create
    mallet_load <trial>
    mallet_run
    mallet_import_tables

Or to run all of these:
    make_all

Or to run a single command:
    run_func (corpus|mallet) <function>
        """
        print(msg)

    def do_make_all(self, arg):
        """Generate and import corpus then run mallet. Optionally pass a trial name."""
        self.do_corpus_check(None)
        if self.ready:
            self.do_corpus_source_make(None)
            self.do_corpus_source_load(None)
            self.do_corpus_tables_create(None)
            self.do_mallet_corpus_load(arg)
            self.do_mallet_model_create(None)
            self.do_mallet_model_import(None)

    # Experimental
    def do_func_list(self, arg):
        """List functions in object (corpus or mallet)."""
        if arg == 'corpus':
            funcs = dir(PoloCorpus)
        elif arg == 'mallet':
            funcs = dir(PoloMallet)
        else:
            print('{} not a valid class. Use `corpus` or `mallet` only.'.format(arg))
            return False
        for func in funcs:
            if func.find('__') == -1:
                print('\t', func)

    def complete_func_list(self, text, line, begidx, endidx):
        mline = line.partition(' ')[2]
        offs = len(mline) - len(text)
        return [s[offs:] for s in self.completions if s.startswith(mline)]

    # Experimental
    def do_func_run(self, arg):
        """Run a method of the corpus or mallet object."""
        if arg:
            parts = arg.split()
            if len(parts) >= 2:
                obj_name = parts[0]
                mtd = parts[1]
                try:
                    obj = getattr(self, obj_name)
                    try:
                        func = getattr(obj, mtd)
                        func()
                    except AttributeError as e:
                        print(e)
                        print("Try running `list_funcs`")
                except AttributeError as e:
                    print(e)
                    print("Try `corpus` or `mallet`.")
            else:
                print("Not enough arguments.")
        else:
            print("No argument given. Need <object> and <method>.")
            print("Try running `list_funcs` and use one with `corpus` or `mallet`.")

    # CONFIG.INI STUFF

    def do_ini_set(self, arg):
        """Set the config file to something other than config.ini)."""
        print("Setting config INI file to {}.".format(arg))
        if arg:
            self.do_ini_check(arg)
            self.default_ini = arg
        else:
            print("No INI file specified.")

    def do_ini_show(self, arg):
        """Show the INI file being used for the config."""
        print('INI file:', self.default_ini)

    def do_ini_create(self, arg):
        """Create an INI file."""
        if arg:
            self.config.create_ini(arg)
        else:
            self.config.create_ini()

    def do_ini_check(self, arg):
        """Check if the INI file is valid."""
        if self.config.validate_ini():
            print(":-) {} is a valid INI file.".format(self.default_ini))
        else:
            print(":-( {} is NOT a valid INI file.".format(self.default_ini))

    def do_ini_show_trials(self, arg):
        """Show all the mallet trial names in the config."""
        trials = self.config.get_trial_names()
        print('Trials: ', ', '.join(trials))

    def do_ini_load(self, arg):
        """Load the config object from the INI file."""
        print("Loading config.")
        print("If you want to change the config, run `ini_set` and then `ini_load`.")
        try:
            self.config = PoloConfig(self.default_ini)
        except ValueError as e:
            print("Can't create new config object with {}".format(self.default_ini), e)
            return False

    # CORPUS STUFF

    def do_corpus_source_load(self, arg):
        """Load the corpus database."""
        print("Loading corpus")
        try:
            self.corpus = PoloCorpus(self.config)
        except ValueError as e:
            print("Can't create corpus.", e)
            self.corpus = None
            self.ready = 0
        self.corpus.cache_mode = False

    def do_corpus_check(self, arg):
        """Check if corpus object has been created."""
        if not hasattr(self, 'corpus') or self.corpus is None:
            print("No corpus object found. Run `corpus_load` first.")
            self.ready = 0
        else:
            print("Corpus object loaded")
            self.ready = 1

    def do_corpus_source_make(self, arg):
        """Generate the source corpus file using the project's Scraper."""
        print("Locating local Scraper.")
        sys.path.append(self.config.ini['DEFAULT']['base_path'])
        try:
            from corpus.scraper import Scraper
            scraper = Scraper(self.config)
            print("Generating corpus file")
            scraper.make_corpus()
        except ImportError:
            print("No Scraper found. Proceeding with existing source data.")

    def do_corpus_tables_create(self, arg):
        """Create the corpus database from the source data."""
        print("Initializing corpus")
        self.do_corpus_check(None)
        if self.ready:

            print("Importing stopwords")
            self.corpus.import_table_stopword(use_nltk=True)

            print("Importing doc")
            self.corpus.import_table_doc()

            print("Importing doctoken and doctokenbow")
            self.corpus.add_table_doctoken()

            print("Importing token and updated doctokenbow")
            self.corpus.add_table_token()

            print('Adding stems to token')
            self.corpus.add_stems_to_token()

            print('Adding TFIDFs to doctokenbow')
            self.corpus.add_tfidf_to_doctokenbow()

            if 'sentiment' in self.config.ini['DEFAULT'] and int(self.config.ini['DEFAULT']['sentiment']) == 1:
                print("Adding sentiment to doc")
                self.corpus.add_sentimant_to_doc()

            if 'get_bigrams' in self.config.ini['DEFAULT'] and int(self.config.ini['DEFAULT']['get_bigrams']) == 1:
                print("Importing bigrams")
                self.corpus.add_tables_ngram_and_docngram(n=2)

            if 'get_trigrams' in self.config.ini['DEFAULT'] and int(self.config.ini['DEFAULT']['get_trigrams']) == 1:
                print("Importing trigrams")
                self.corpus.add_tables_ngram_and_docngram(n=3)

            print("Export mallet corpus")
            self.corpus.export_mallet_corpus()

            # Run this here since it does not need to be run
            # for each trial. We use the default trail since it
            # does not matter.
            mallet = PoloMallet(self.config)
            print('Converting corpus for mallet')
            mallet.mallet_import()

            print("Finished creating corpus tables and setting table for mallet.")

    # MALLET STUFF

    def do_mallet_corpus_load(self, arg):
        """Create a mallet object for given trial."""
        if arg:
            self.trial = arg
        print("Loading mallet object for trial `{}`.".format(self.trial))
        try:
            self.mallet = PoloMallet(self.config, self.trial)
        except ValueError as e:
            print("Can't create mallet object.", e)
            return False
        self.mallet.cache_mode = False #todo: Put in config or argument

    def do_mallet_check(self, arg):
        """Check if mallet object has been created."""
        if not hasattr(self, 'mallet') or self.mallet is None:
            print("No mallet object found. Run `mallet_load <trial_name>` first.")
            self.ready = 0
        else:
            print("Using mallet object with trial `{}`.".format(self.trial))
            print(self.mallet)
            self.ready = 1

    def do_mallet_model_create(self, arg):
        """Create topic model from from the source data using Mallet. Pass a trial name as an argument.
        Otherwise defaults to 'trial1'. Use `show_trials` to see available trial names."""
        self.do_mallet_check(None)
        if self.ready:

            print('Training the model. This may take a while.')
            self.mallet.mallet_train()

            print("Done training. Don't forget to run `mallet_import <trial_name>`.")

    def do_mallet_model_import(self, arg):
        """Import files generated by mallet into the model database."""
        self.do_mallet_check(None)
        if self.ready:

            # fixme: Make sure that files exist before running this!

            print("Importing data into database.")
            self.mallet.tables_to_db()

            print("Adding diagnostics tables.")
            self.mallet.add_diagnostics()

            print("Adding doc table with topic entropy.")
            self.mallet.add_topic_entropy()

            print("Adding topicpair table.")
            self.mallet.create_table_topicpair()

            print("Adding topicdoc matrices.")
            self.mallet.add_group_field_tables()

            print("Adding topic alpha stats.")
            self.mallet.add_topic_alpha_stats()

            print("Adding doctopic weight stats.")
            self.mallet.add_doctopic_weight_stats()

            print("Adding doctopic entropy stats.")
            self.mallet.add_doctopic_entropy_stats()

            print("Adding topic glosses.")
            self.mallet.add_topic_glosses()

            print("Done importing", self.mallet.trial_name)

    def do_mallet_clean_files(self, arg):
        """Delete mallet's output files."""
        self.do_mallet_check(None)
        if self.ready:

            print("Cleaning up after mallet.")
            self.mallet.del_mallet_files()

            print("Done cleaning mallet files.")

    def do_mallet_retro(self, arg):
        """Create database for older version of Polo."""
        if arg:
            trial = arg
        else:
            trial = self.trial
        corpus_dbfile = '{}/{}-corpus.db'.format(self.base_path, self.slug)
        model_dbfile = '{}/{}-mallet-{}.db'.format(self.base_path, self.slug, trial)
        if not os.path.isfile(model_dbfile):
            print(model_dbfile, 'not found')
        elif not os.path.isfile(corpus_dbfile):
            print(corpus_dbfile, 'not found')
        else:
            print('Corpus db:', corpus_dbfile)
            print('Model db:', model_dbfile)

            from polo2 import PoloRetro
            retro = PoloRetro(self.config)
            retro.retro_combine(corpus_dbfile, model_dbfile)
            retro.create_all_tables()


if __name__ == '__main__':
    PoloShell().cmdloop()

