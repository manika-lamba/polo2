#! /usr/bin/env python3

import cmd, sys, readline, os

from polo2 import PoloConfig
from polo2 import PoloMallet
from polo2 import PoloCorpus

class PoloShell(cmd.Cmd):

    intro = "Welcome to Polo Shell. Run set_ini to get started."
    prompt = 'posh: '

    default_ini = 'config.ini'

    def preloop(self):
        if not os.path.isfile(self.default_ini):
            print('No config file! Run `polo setup` to get started.')
            sys.exit(1)
        else:
            try:
                self.config = PoloConfig(self.default_ini)
            except ValueError as e:
                print("Can't create config object.", e)
                sys.exit(1)
            print("Using config.ini")
            self.trials = self.config.get_trial_names()
            self.slug = self.config.ini['DEFAULT']['slug']
            self.base_path = self.config.ini['DEFAULT']['base_path']
            print("Available trials:", ', '.join(self.trials))

    def onerror(self):
        """Called if an exception is raised in any of precmd(), onecmd(),
        or postcmd(). If true is returned, the exception is deemed to have
        been dealt with.
        """
        pass

    def logerror(self, msg):
        sys.stderr.write(msg + '\n')

    def do_EOF(self, arg):
        return True

    def do_shell(self, arg):
        pass

    def do_set_ini(self, arg):
        "Set the config file (usually to something other than config.ini)."
        if arg:
            try:
                self.config = PoloConfig(arg)
            except ValueError as e:
                print("Can't create new config object with {}".format(arg), e)
                return False
            self.default_ini = arg

    def do_show_ini(self, arg):
        "Show the file being used for the config"
        print('INI file:', self.default_ini)

    def do_test(self, arg):
        "Just a test"
        print("Testing mallet.create_table_topicpair()")
        if not self.do_check_mallet(None):
            return False
        self.mallet.create_table_topicpair()

    def do_make_all(self, arg):
        'Generate and import corpus then run mallet. Optionally pass a trial name.'
        self.do_make_corpus_source(None)
        self.do_create_corpus(None)
        self.do_load_mallet(arg)
        self.do_run_mallet(None)
        self.do_import_mallet(None)

    def do_make_corpus_source(self, arg):
        "Generate the source corpus file using the project's Scraper"
        print("Locating local Scraper.")
        sys.path.append(self.config.ini['DEFAULT']['base_path'])
        try:
            from corpus.scraper import Scraper
            scraper = Scraper(self.config)
            print("Generating corpus file")
            scraper.make_corpus()
        except ImportError:
            print("No Scraper found. Proceeding with existing source data.")

    def do_create_corpus(self, arg):
        "Create the corpus database from the source data"
        print("Initializing corpus")
        try:
            corpus = PoloCorpus(self.config)
        except ValueError as e:
            print("Can't create corpus.", e)
            return False
        corpus.cache_mode = True

        print("Importing stopwords")
        corpus.import_table_stopword(use_nltk = True)

        print("Importing doc")
        corpus.import_table_doc()

        print("Importing doctoken")
        corpus.add_table_doctoken()

        print("Importing token")
        corpus.add_table_token()

        if 'get_bigrams' in self.config.ini['DEFAULT'] and self.config.ini['DEFAULT']['get_bigrams']:
            print("Importing bigrams")
            corpus.add_tables_ngram_and_docngram(n = 2)

        if 'get_trigrams' in self.config.ini['DEFAULT'] and self.config.ini['DEFAULT']['get_trigrams']:
            print("Importing trigrams")
            corpus.add_tables_ngram_and_docngram(n = 3)

        print("Export mallet corpus")
        corpus.export_mallet_corpus()

        # Run this here since it does not need to be run
        # for each trial
        mallet = PoloMallet(self.config)
        print('Converting corpus for mallet')
        mallet.mallet_import()

        self.corpus = corpus

    def do_retro(self, arg):

        trial = 'trial1'
        if arg: trial = arg
        corpus_dbfile = '{}/{}-corpus.db'.format(self.base_path, self.slug)
        model_dbfile =  '{}/{}-mallet-{}.db'.format(self.base_path, self.slug, trial)
        if not os.path.isfile(model_dbfile):
            print(model_dbfile, 'not found')
        elif not os.path.isfile(corpus_dbfile):
            print(corpus_dbfile, 'not found')
        else:
            print('Corpus db:', corpus_dbfile)
            print('Model db:', model_dbfile)

            from polo2 import PoloRetro
            retro = PoloRetro(self.config)
            retro.retro_combine(corpus_dbfile, model_dbfile)
            retro.create_all_tables()

    def do_show_trials(self, arg):
        "Show all the trial names in the config"
        trials = self.config.get_trial_names()
        print('Trials: ', ', '.join(trials))

    def do_load_mallet(self, arg):
        """Creates a mallet object for use by other mallet commands."""
        self.trial = ''
        if arg:
            self.trial = arg
        else:
            self.trial = 'trial1' # todo: Make sure this assumption is stable

        print("Loading mallet object for trial `{}`.".format(self.trial))
        try:
            self.mallet = PoloMallet(self.config, self.trial)
        except ValueError as e:
            print("Can't create mallet object.", e)
            return False
        self.mallet.cache_mode = False# todo: Put in config or argument

    def do_check_mallet(self, arg):
        """Check if mallet object has been created."""
        #print("Checking to see of mallet object exists ...")
        if not hasattr(self, 'mallet'):
            print("No mallet object found. Run `load_mallet <trial_name>` first.")
            return False
        else:
            print("Using mallet object with trial `{}`.".format(self.mallet.trial_name))
            return True

    def do_run_mallet(self, arg):
        """Create topic model from from the source data using Mallet. Pass a trial name as an argument.
        Otherwise defaults to 'trial1'. Use `show_trials` to see available trial names.
        """
        if not self.do_check_mallet(None):
            return False

        print('Training the model. This may take a while.')
        self.mallet.mallet_train()

        print("Done training. Don't forget to run `import_mallet <trial_name>`.")

    def do_import_mallet(self, arg):
        """Import files generated by mallet into the model database."""
        # fixme: Make sure that files exist before running this!

        if not self.do_check_mallet(None):
            return False

        print("Importing data into database.")
        self.mallet.tables_to_db()

        print("Adding diagnostics tables.")
        self.mallet.add_diagnostics()

        print("Adding doc table with topic entropy.")
        self.mallet.add_topic_entropy()

        print("Adding topicpair table.")
        self.mallet.create_table_topicpair()

        print("Adding topicdoc matrices.")
        self.mallet.create_topicdoc_col_matrix(group_col = 'label')
        self.mallet.create_topicdoc_col_matrix(group_col = 'ord') # todo: SKIP IF ord == label

        print("Adding topic alpha stats.")
        self.mallet.add_topic_alpha_stats()

        print("Adding doctopic weight stats.")
        self.mallet.add_doctopic_weight_stats()

        print("Adding doctopic entropy stats.")
        self.mallet.add_doctopic_entropy_stats()

        print("Done importing", self.mallet.trial_name)

    def do_adhoc_mallet(self, arg):
        """Do some ad hoc stuff"""
        if not self.do_check_mallet(None):
            return False

        print("Importing doctopic col matrix.")
        #self.mallet.import_table_doctopic()
        self.mallet.create_topicdoc_col_matrix('label')

    def do_clean_mallet_files(self, arg):
        """Delete mallet's output files."""

        if not self.do_check_mallet(None):
            return False

        print("Cleaning up after mallet.")
        self.mallet.del_mallet_files()

        print("Done cleaning mallet files.")

    def do_create_ini(self, arg):
        if arg:
            self.config.create_ini(arg)
        else:
            self.config.create_ini()

    def do_validate_ini(self, arg):
        self.config.validate_ini()

    def do_print_ini(self, arg):
        print(self.config)

    def do_bye(self, arg):
        print('Thank you for using the Polo Shell.')
        return True

    def do_quit(self, arg):
        print('Thank you for using the Polo Shell.')
        return True


if __name__ == '__main__':
    PoloShell().cmdloop()

